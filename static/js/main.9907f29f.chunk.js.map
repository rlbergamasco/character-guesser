{"version":3,"sources":["components/Snowman.js","App.js","reportWebVitals.js","index.js"],"names":["Snowman","props","handleGuess","e","letter","target","value","setState","st","guessed","add","mistake","answer","includes","resetGame","getName","Set","state","category","handleChange","bind","handleSubmit","url","this","Math","floor","random","axios","get","then","json","data","firstname","replace","toLowerCase","catch","err","console","log","message","DisplayName","forms","name","split","map","has","className","onClick","disabled","i","length","event","preventDefault","gameOver","isWinner","guessedWord","join","gameStat","generateButtons","onSubmit","onChange","type","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9907f29f.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Snowman.css';\nimport axios from './../../node_modules/axios';\n\nclass Snowman extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mistake: 0,\n            guessed: new Set([\"-\"]),\n            answer: \"hello\",\n            category: \"got\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.resetGame()\n    }\n\n    getName() {\n        let url = ''\n        if (this.state.category === \"got\") {\n            let num = Math.floor(Math.random() * 2137 + 1);\n            url = 'https://anapioficeandfire.com/api/characters/' + num;\n        } else if (this.state.category === \"starwars\") {\n            let num = Math.floor(Math.random() * 87 + 1);\n            url = 'https://akabab.github.io/starwars-api/api/id/' + num + '.json';\n        } else if (this.state.category === \"office\") {\n            url = 'https://www.officeapi.dev/api/characters/random';\n            axios.get(url)\n                .then(json => this.setState({ answer: json.data.data.firstname.replace(/\\s+/g, '-').toLowerCase() }))\n                .catch(err => console.log(err.message));\n            return;\n        } else if (this.state.category === \"mario\") {\n            let num = Math.floor(Math.random() * 78 + 1);\n            url = 'https://api.kuroganehammer.com/api/characters/' + num;\n            axios.get(url)\n                .then(json => this.setState({ answer: json.data.DisplayName.replace(/\\s+/g, '-').toLowerCase() }))\n                .catch(err => console.log(err.message));\n            return;\n        } else if (this.state.category === \"poke\") {\n            let num = Math.floor(Math.random() * 897 + 1);\n            url = 'https://pokeapi.co/api/v2/pokemon/' + num;\n            axios.get(url)\n                .then(json => this.setState({ answer: json.data.forms[0].name.replace(/\\s+/g, '-').toLowerCase() }))\n                .catch(err => console.log(err.message));\n            return;\n        }\n        axios.get(url)\n            .then(json => this.setState({ answer: json.data.name.replace(/\\s+/g, '-').toLowerCase() }))\n            .catch(err => console.log(err.message));\n    }\n\n    handleGuess = e => {\n        let letter = e.target.value;\n        this.setState(st => ({\n            guessed: st.guessed.add(letter),\n            mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1)\n        }));\n    }\n\n    guessedWord() {\n        return this.state.answer.split(\"\").map(letter => (!(this.state.guessed.has(letter)) ? \" _ \" : (letter === \"-\" ? \"-\" : letter)))\n    }\n\n    generateButtons() {\n        return \"abcdefghijklmnopqrstuvwxyz0123456789Ã©\".split(\"\").map(letter => (\n            <button\n                className=\"btn btn-lg btn-primary m-2\"\n                key={letter}\n                value={letter}\n                onClick={this.handleGuess}\n                disabled={this.state.guessed.has(letter)}\n            >{letter}</button>\n        ));\n    }\n\n    // checkName() {\n    //     let alph = \"abcdefghijklmnopqrstuvwxyz-\";\n    //     for (let i = 0; i < this.state.answer.length; i++) {\n    //         let found = false;\n    //         for (let j = 0; j < alph.length; j++) {\n    //             if (this.state.answer.charAt(i) === alph.charAt(j)) {\n    //                 found = true;\n    //             }\n    //         }\n    //         if (!found) {\n    //             console.log(this.state.answer)\n    //             //this.resetGame();\n    //             return false;\n    //         }\n    //     }\n    //     return true;\n    // }\n\n    nameCheck() {\n        let alph = \"abcdefghijklmnopqrstuvwxyz-\";\n        for (let i = 0; i < this.state.answer.length; i++) {\n            if (!alph.includes(this.state.answer[i])) {\n                //console.log(\"bad answer\")\n                return false;\n            }\n        }\n    }\n\n    resetGame = () => {\n        this.getName();\n        //if (this.nameCheck() === false) {\n        //console.log(\"NAME CHANGE\")\n        //this.getName()\n        //}\n        // let alph = \"abcdefghijklmnopqrstuvwxyz-\";\n        // for (let i = 0; i < this.state.answer.length; i++) {\n        //     let found = false;\n        //     for (let j = 0; j < alph.length; j++) {\n        //         if (this.state.answer.charAt(i) === alph.charAt(j)) {\n        //             found = true;\n        //         }\n        //     }\n        //     if (!found) {\n        //         console.log(this.state.answer)\n        //         //this.resetGame();\n        //     }\n        // }\n        this.setState({\n            mistake: 0,\n            guessed: new Set([\"-\"]),\n            answer: \"character\"\n        });\n    }\n\n    handleChange(event) {\n        this.setState({ category: event.target.value });\n        //console.log(this.state.category);\n    }\n\n    handleSubmit(event) {\n        //alert('Your favorite flavor is: ' + this.state.category);\n        event.preventDefault();\n        this.resetGame();\n    }\n\n    render() {\n        const gameOver = this.state.mistake >= 6;\n        const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n        let gameStat = this.generateButtons();\n\n        if (gameOver) {\n            gameStat = \"You lost :(\";\n        }\n\n        if (isWinner) {\n            gameStat = \"You won!\";\n        }\n\n        return (\n            <div className=\"snowman container\">\n                <h1>Character Guesser</h1>\n                <div className=\"text-center\">\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Choose a category:\n                            <select className=\"form-control\" value={this.state.value} onChange={this.handleChange}>\n                                <option value=\"got\">Game of Thrones</option>\n                                <option value=\"starwars\">Star Wars</option>\n                                <option value=\"office\">The Office</option>\n                                <option value=\"mario\">Smash Bros</option>\n                                <option value=\"poke\">Pokemon</option>\n                            </select>\n                        </label>\n                        <br />\n                        <input className=\"btn btn-info\" type=\"submit\" value=\"Submit\" />\n                    </form>\n                    <p>Use the letters (and possibly numbers) below to guess the character!</p>\n                    <p>*Numbers and a special character are provided mostly for the Star Wars category.</p>\n                    <h1>{!gameOver ? this.guessedWord() : this.state.answer}</h1>\n                    <p>{gameStat}</p>\n                    <p>Wrong Guesses: {this.state.mistake} of 6</p>\n\n                    <button className=\"btn btn-info\" onClick={this.resetGame}>Reset</button>\n                </div>\n            </div >\n        )\n    }\n}\n//<p>{this.state.answer}</p>\nexport default Snowman;","import './App.css';\nimport Snowman from './components/Snowman'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Snowman />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}